// The filter function was incorrectly handling the priority comparison
// amount.toFixed() should be amount.toFixed(2)
// There was a missing property blockchain in the WalletBalance interface

// Changes: 
// Added blockchain to the WalletBalance interface.
// Corrected the amount.toFixed() to amount.toFixed(2)
// Adjusted the priority comparison in the filter function to ensure only valid balances are processed.

interface WalletBalance {
  currency: string;
  amount: number;
  blockchain: string; // Blockchain name 
}
interface FormattedWalletBalance {
  currency: string;
  amount: number;
  formatted: string;
}

interface Props extends BoxProps {

}
const WalletPage: React.FC<Props> = (props: Props) => {
  const { children, ...rest } = props;
  const balances = useWalletBalances();
  const prices = usePrices();

  // Function to assign priority to different blockchains
  const getPriority = (blockchain: string): number => {
    switch (blockchain) {
      case 'Osmosis':
        return 100
      case 'Ethereum':
        return 50
      case 'Arbitrum':
        return 30
      case 'Zilliqa':
        return 20
      case 'Neo':
        return 20
      default:
        return -99
    }
  }

  const sortedBalances = useMemo(() => {
    return balances.filter((balance: WalletBalance) => {
      const balancePriority = getPriority(balance.blockchain);
      if (balancePriority > -99 && balance.amount > 0) {
        return true;
      }
      return false
    }).sort((lhs: WalletBalance, rhs: WalletBalance) => {
      const leftPriority = getPriority(lhs.blockchain);
      const rightPriority = getPriority(rhs.blockchain);
      if (leftPriority > rightPriority) {
        return -1;
      } else if (leftPriority < rightPriority) {
        return 1;
      }
    });
  }, [balances, prices]);

  const formattedBalances = sortedBalances.map((balance: WalletBalance) => {
    return {
      ...balance,
      formatted: balance.amount.toFixed(2) // Fixed the amount to two decimal places
    }
  })

  const rows = formattedBalances.map((balance: FormattedWalletBalance, index: number) => {
    const usdValue = prices[balance.currency] * balance.amount; // Calculate USD value
    return (
      <WalletRow 
        className= { classes.row }
    key = { index }
    amount = { balance.amount }
    usdValue = { usdValue }
    formattedAmount = { balance.formatted }
      />
    )
})

return (
  <div { ...rest } >
  { rows }
  </div>
)
}